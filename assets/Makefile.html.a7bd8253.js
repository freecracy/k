import{d as a}from"./app.e373aad4.js";const s={},n=a('<h1 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile" aria-hidden="true">#</a> Makefile</h1><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><p>每行命令在一个单独的 shell 中执行,这些 Shell 之间没有继承关系.一个解决办法是将两行命令写在一行,中间用分号分隔.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token symbol">var-kept</span><span class="token punctuation">:</span>\n    <span class="token keyword">export</span> foo<span class="token operator">=</span>bar<span class="token punctuation">;</span> echo <span class="token string">&quot;foo=[$$foo]&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>另一个解决办法是在换行符前加反斜杠转义.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token keyword">export</span> foo<span class="token operator">=</span>bar<span class="token punctuation">;</span> \\\n    echo <span class="token string">&quot;foo=[$$foo]&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最后一个方法是加上<code>.ONESHELL:</code>命令.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token builtin">.ONESHELL</span><span class="token punctuation">:</span>\n<span class="token symbol">var-kept</span><span class="token punctuation">:</span>\n    <span class="token keyword">export</span> foo<span class="token operator">=</span>bar<span class="token punctuation">;</span>\n    echo <span class="token string">&quot;foo=[$$foo]&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="recipeprefix" tabindex="-1"><a class="header-anchor" href="#recipeprefix" aria-hidden="true">#</a> .RECIPEPREFIX</h2><p>每行命令之前必须有一个 tab 键,如果想用其他键,可以用内置变量.RECIPEPREFIX 声明.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code>.RECIPEPREFIX <span class="token operator">=</span> &gt;\n<span class="token symbol">all</span><span class="token punctuation">:</span>\n&gt; echo Hello, world\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token comment"># 这是注释</span>\n<span class="token symbol">result.txt</span><span class="token punctuation">:</span> source.txt\n    <span class="token comment"># 这是注释</span>\n    cp source.txt result.txt <span class="token comment"># 这也是注释</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="回声" tabindex="-1"><a class="header-anchor" href="#回声" aria-hidden="true">#</a> 回声</h3><p>正常情况下,make 会打印每条命令,然后再执行,这就叫做回声.在命令的前面加上<code>@</code>,就可以关闭回声.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token symbol">test</span><span class="token punctuation">:</span>\n    <span class="token operator">@</span><span class="token comment"># 这是测试</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="模式匹配" tabindex="-1"><a class="header-anchor" href="#模式匹配" aria-hidden="true">#</a> 模式匹配</h2><p>使用匹配符<code>%</code>,可以将大量同类型的文件,只用一条规则就完成构建.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token symbol">%.o</span><span class="token punctuation">:</span> %.c <span class="token comment"># a.o : a.c</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>调用时,变量需要放在 <code>$()</code> 之中.调用 Shell 变量,需要在美元符号前,再加一个美元符号,这是因为 Make 命令会对美元符号转义.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code>txt <span class="token operator">=</span> Hello World\n<span class="token symbol">test</span><span class="token punctuation">:</span>\n    <span class="token operator">@</span>echo <span class="token variable">$</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>\n    <span class="token operator">@</span>echo <span class="token variable">$$HOME</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code>VARIABLE <span class="token operator">=</span> value   <span class="token comment"># 在执行时扩展,允许递归扩展</span>\nVARIABLE <span class="token operator">:=</span> value  <span class="token comment"># 在定义时扩展</span>\nVARIABLE <span class="token operator">?=</span> value  <span class="token comment"># 只有在该变量为空时才设置值</span>\nVARIABLE <span class="token operator">+=</span> value  <span class="token comment"># 将值追加到变量的尾端</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="内置变量" tabindex="-1"><a class="header-anchor" href="#内置变量" aria-hidden="true">#</a> 内置变量</h3><h3 id="自动变量" tabindex="-1"><a class="header-anchor" href="#自动变量" aria-hidden="true">#</a> 自动变量</h3><ul><li><code>$@</code> : 指代当前目标,就是 Make 命令当前构建的那个目标</li><li><code>$&lt;</code> 指代第一个前置条件</li></ul><h2 id="判断和循环" tabindex="-1"><a class="header-anchor" href="#判断和循环" aria-hidden="true">#</a> 判断和循环</h2><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token keyword">ifeq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span>,gcc<span class="token punctuation">)</span>\n  libs<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>libs_for_gcc<span class="token punctuation">)</span>\n<span class="token keyword">else</span>\n  libs<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>normal_libs<span class="token punctuation">)</span>\n<span class="token keyword">endif</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token variable">$</span><span class="token punctuation">(</span>function arguments<span class="token punctuation">)</span><span class="token comment"># 或者 ${function arguments}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="shell-函数" tabindex="-1"><a class="header-anchor" href="#shell-函数" aria-hidden="true">#</a> shell 函数</h3><p>shell 函数用来执行 shell 命令</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code>srcfiles <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> echo src/<span class="token punctuation">{</span>00..99<span class="token punctuation">}</span>.txt<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="wildcard-函数" tabindex="-1"><a class="header-anchor" href="#wildcard-函数" aria-hidden="true">#</a> wildcard 函数</h3><p>wildcard 函数用来在 Makefile 中,替换 Bash 的通配符.</p><h3 id="subst-函数" tabindex="-1"><a class="header-anchor" href="#subst-函数" aria-hidden="true">#</a> subst 函数</h3><p>用来文本替换.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">subst</span> ee,EE,feet on the street<span class="token punctuation">)</span> <span class="token comment"># $(subst from,to,text)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="patsubst-函数" tabindex="-1"><a class="header-anchor" href="#patsubst-函数" aria-hidden="true">#</a> patsubst 函数</h3><p>模式匹配的替换.</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %.c,%.o,x.c.c bar.c<span class="token punctuation">)</span> <span class="token comment"># $(patsubst pattern,replacement,text)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="替换后缀名" tabindex="-1"><a class="header-anchor" href="#替换后缀名" aria-hidden="true">#</a> 替换后缀名</h3><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token symbol">min</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OUTPUT<span class="token punctuation">:</span>.js<span class="token operator">=</span>.min.js<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',45);s.render=function(a,s){return n};export default s;
