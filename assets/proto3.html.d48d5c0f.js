import{d as n}from"./app.e373aad4.js";const s={},a=n('<h1 id="proto3" tabindex="-1"><a class="header-anchor" href="#proto3" aria-hidden="true">#</a> proto3</h1><h2 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装" aria-hidden="true">#</a> 下载安装</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># https://github.com/protocolbuffers/protobuf</span>\nprotoc --version\ngo get -u github.com/golang/protobuf/protoc-gen-go\ngo get -u github.com/golang/protobuf\nprotoc --go_out<span class="token operator">=</span>. *.proto\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="一个简答的例子" tabindex="-1"><a class="header-anchor" href="#一个简答的例子" aria-hidden="true">#</a> 一个简答的例子</h2><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>\n  <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token builtin">int32</span> page_number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token builtin">int32</span> result_per_page <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="版本定义" tabindex="-1"><a class="header-anchor" href="#版本定义" aria-hidden="true">#</a> 版本定义</h2><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="引入其它-proto-文件" tabindex="-1"><a class="header-anchor" href="#引入其它-proto-文件" aria-hidden="true">#</a> 引入其它 proto 文件</h2><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">import</span>  <span class="token string">&quot;other.proto&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="package" tabindex="-1"><a class="header-anchor" href="#package" aria-hidden="true">#</a> package</h2><p>包名可以避免对 message 类型之间的名字冲突,同名的 Message 可以通过 package 进行区分.</p><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">import</span>  <span class="token string">&quot;other.proto&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="option" tabindex="-1"><a class="header-anchor" href="#option" aria-hidden="true">#</a> option</h2><p>option 可以用在 proto 的 scope 中,或者 message、enum、service 的定义中.可以是 Protobuf 定义的 option,或者自定义的 option.</p><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">option</span> java_package <span class="token operator">=</span> <span class="token string">&quot;com.example.foo&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="普通字段" tabindex="-1"><a class="header-anchor" href="#普通字段" aria-hidden="true">#</a> 普通字段</h2><p>repeated 允许字段重复,对于 Go 语言来说,它会编译成数组(slice of type)类型的格式.同一个 message 的每个字段都有唯一一个编号,并且建议终生这个编号都不要改变.</p><ul><li>数字类型: double、float、int32、int64、uint32、uint64、sint32、sint64 : 存储长度可变的浮点数、整数、无符号整数和有符号整数</li><li>存储固定大小的数字类型: fixed32、fixed64、sfixed32、sfixed64 : 存储空间固定</li><li>布尔类型: bool</li><li>字符串: string</li><li>bytes: 字节数组</li><li>messageType: 消息类型</li><li>enumType:枚举类型</li></ul><table><thead><tr><th style="text-align:left;">.proto Type</th><th style="text-align:left;">Go Type</th><th style="text-align:left;">PHP Type</th></tr></thead><tbody><tr><td style="text-align:left;">double</td><td style="text-align:left;">float64</td><td style="text-align:left;">float</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">float32</td><td style="text-align:left;">float</td></tr><tr><td style="text-align:left;">int32</td><td style="text-align:left;">int32</td><td style="text-align:left;">integer</td></tr><tr><td style="text-align:left;">int64</td><td style="text-align:left;">int64</td><td style="text-align:left;">integer/string[6]</td></tr><tr><td style="text-align:left;">uint32</td><td style="text-align:left;">uint32</td><td style="text-align:left;">integer</td></tr><tr><td style="text-align:left;">uint64</td><td style="text-align:left;">uint64</td><td style="text-align:left;">integer/string[6]</td></tr><tr><td style="text-align:left;">sint32</td><td style="text-align:left;">int32</td><td style="text-align:left;">integer</td></tr><tr><td style="text-align:left;">sint64</td><td style="text-align:left;">int64</td><td style="text-align:left;">integer/string[6]</td></tr><tr><td style="text-align:left;">fixed32</td><td style="text-align:left;">uint32</td><td style="text-align:left;">integer</td></tr><tr><td style="text-align:left;">fixed64</td><td style="text-align:left;">uint64</td><td style="text-align:left;">integer/string[6]</td></tr><tr><td style="text-align:left;">sfixed32</td><td style="text-align:left;">int32</td><td style="text-align:left;">integer</td></tr><tr><td style="text-align:left;">sfixed64</td><td style="text-align:left;">int64</td><td style="text-align:left;">integer/string[6]</td></tr><tr><td style="text-align:left;">bool</td><td style="text-align:left;">bool</td><td style="text-align:left;">boolean</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">string</td><td style="text-align:left;">string</td></tr><tr><td style="text-align:left;">bytes</td><td style="text-align:left;">[]byte</td><td style="text-align:left;">string</td></tr></tbody></table><h2 id="oneof" tabindex="-1"><a class="header-anchor" href="#oneof" aria-hidden="true">#</a> Oneof</h2><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">OneofMessage</span> <span class="token punctuation">{</span>\n    <span class="token keyword">oneof</span> test_oneof <span class="token punctuation">{</span>\n      <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n      <span class="token builtin">int64</span> value <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="map-类型" tabindex="-1"><a class="header-anchor" href="#map-类型" aria-hidden="true">#</a> map 类型</h2><p>map 字段不能同时使用 repeated.</p><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token map class-name">map<span class="token punctuation">&lt;</span><span class="token builtin">int64</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="reserved" tabindex="-1"><a class="header-anchor" href="#reserved" aria-hidden="true">#</a> Reserved</h2><p>Reserved 可以用来指明此 message 不使用某些字段,也就是忽略这些字段.声明保留的字段你就不要再定义了,否则编译的时候会出错.</p><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">AllNormalypes</span> <span class="token punctuation">{</span>\n  <span class="token keyword">reserved</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">to</span> <span class="token number">6</span><span class="token punctuation">;</span>\n  <span class="token keyword">reserved</span> <span class="token string">&quot;field14&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;field11&quot;</span><span class="token punctuation">;</span>\n  <span class="token builtin">double</span> field1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token comment">// float field2 = 2;</span>\n  <span class="token builtin">int32</span> field3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token comment">// int64 field4 = 4;</span>\n  <span class="token comment">// uint32 field5 = 5;</span>\n  <span class="token comment">// uint64 field6 = 6;</span>\n  <span class="token builtin">sint32</span> field7 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>\n  <span class="token builtin">sint64</span> field8 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>\n  <span class="token builtin">fixed32</span> field9 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n  <span class="token builtin">fixed64</span> field10 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token comment">// sfixed32 field11 = 11;</span>\n  <span class="token builtin">sfixed64</span> field12 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>\n  <span class="token builtin">bool</span> field13 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>\n  <span class="token comment">// string field14 = 14;</span>\n  <span class="token builtin">bytes</span> field15 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> 枚举类型</h2><p>所以避免在同一个 package 定义重名的枚举字段.</p><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">enum</span> <span class="token class-name">EnumAllowingAlias</span> <span class="token punctuation">{</span>\n  <span class="token keyword">option</span> allow_alias <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  UNKNOWN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  STARTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  RUNNING <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">enum</span> <span class="token class-name">EnumNotAllowingAlias</span> <span class="token punctuation">{</span>\n  UNKNOWN2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  STARTED2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token comment">// RUNNING = 1;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>如果设置 allow_alias,允许字段编号重复,RUNNING 是 STARTED 的别名.</li><li>第一个枚举值必须是 0,而且必须定义</li></ul><h2 id="使用其它类型" tabindex="-1"><a class="header-anchor" href="#使用其它类型" aria-hidden="true">#</a> 使用其它类型</h2><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">SearchResponse</span> <span class="token punctuation">{</span>\n  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Result</span> results <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 自定义类型</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">message</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>\n  <span class="token builtin">string</span> url <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token builtin">string</span> title <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">repeated</span> <span class="token builtin">string</span> snippets <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="嵌套类型" tabindex="-1"><a class="header-anchor" href="#嵌套类型" aria-hidden="true">#</a> 嵌套类型</h2><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">SearchResponse</span> <span class="token punctuation">{</span>\n  <span class="token keyword">message</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>\n    <span class="token builtin">string</span> url <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token builtin">string</span> title <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">repeated</span> <span class="token builtin">string</span> snippets <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Result</span> results <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> Any</h2><p>any 字段允许你处理嵌套数据,并不需要它的 proto 定义.一个 Any 以 bytes 呈现序列化的消息,并且包含一个 URL 作为这个类型的唯一标识和元数据.</p><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">import</span> <span class="token string">&quot;google/protobuf/any.proto&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">message</span> <span class="token class-name">ErrorStatus</span> <span class="token punctuation">{</span>\n  <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>Any</span> details <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="更新消息类型" tabindex="-1"><a class="header-anchor" href="#更新消息类型" aria-hidden="true">#</a> 更新消息类型</h2><ul><li>不要改变已有字段的字段编号</li><li>当你增加一个新的字段的时候,老系统序列化后的数据依然可以被你的新的格式所解析,只不过你需要处理新加字段的缺省值.老系统也能解析你信息的值,新加字段只不过被丢弃了</li><li>字段也可以被移除,但是建议你 Reserved 这个字段,避免将来会使用这个字段</li><li>int32,uint32,int64,uint64 和 bool 类型都是兼容的</li><li>sint32 和 sint64 兼容,但是不和其它整数类型兼容</li><li>string 和 bytes 兼容,如果 bytes 是合法的 UTF-8 bytes 的话</li><li>嵌入类型和 bytes 兼容,如果 bytes 包含一个消息的编码版本的话</li></ul><h2 id="gogo-库" tabindex="-1"><a class="header-anchor" href="#gogo-库" aria-hidden="true">#</a> gogo 库</h2><p>虽然官方库 golang/protobu 提供了对 Protobuf 的支持,但是使用最多还是第三方实现的库 gogo/protobuf.</p><h3 id="gofast" tabindex="-1"><a class="header-anchor" href="#gofast" aria-hidden="true">#</a> gofast</h3><p>速度优先.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>go get github.com/gogo/protobuf/protoc-gen-gofast\nprotoc --gofast_out<span class="token operator">=</span>. myproto.proto\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gogofast、gogofaster、gogoslick" tabindex="-1"><a class="header-anchor" href="#gogofast、gogofaster、gogoslick" aria-hidden="true">#</a> gogofast、gogofaster、gogoslick</h3><p>gogofast 类似 gofast,但是会导入 gogoprotobuf. gogofaster 类似 gogofast,不会产生 XXX_unrecognized 指针字段,可以减少垃圾回收时间. gogoslick 类似 gogofaster,但是可以增加一些额外的方法 gostring 和 equal 等等.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>go get github.com/gogo/protobuf/proto\ngo get github.com/gogo/protobuf/<span class="token punctuation">{</span>binary<span class="token punctuation">}</span> //protoc-gen-gogofast、protoc-gen-gogofaster 、protoc-gen-gogoslick\ngo get github.com/gogo/protobuf/gogoproto\nprotoc -I<span class="token operator">=</span>. -I<span class="token operator">=</span><span class="token variable">$GOPATH</span>/src -I<span class="token operator">=</span><span class="token variable">$GOPATH</span>/src/github.com/gogo/protobuf/protobuf --<span class="token punctuation">{</span>binary<span class="token punctuation">}</span>_out<span class="token operator">=</span>. myproto.proto\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="protoc-gen-gogo" tabindex="-1"><a class="header-anchor" href="#protoc-gen-gogo" aria-hidden="true">#</a> protoc-gen-gogo</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>go get github.com/gogo/protobuf/proto\ngo get github.com/gogo/protobuf/jsonpb\ngo get github.com/gogo/protobuf/protoc-gen-gogo\ngo get github.com/gogo/protobuf/gogoproto\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc" aria-hidden="true">#</a> grpc</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>protoc --gofast_out<span class="token operator">=</span>plugins<span class="token operator">=</span>grpc:. my.proto\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',52);s.render=function(n,s){return a};export default s;
