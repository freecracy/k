import{o as n,c as s,F as a,a as e,b as l}from"./app.e373aad4.js";const t={},c=e("h1",{id:"创建和发布应用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#创建和发布应用","aria-hidden":"true"},"#"),l(" 创建和发布应用")],-1),p=e("h2",{id:"deployment",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#deployment","aria-hidden":"true"},"#"),l(" deployment")],-1),u=e("p",null,"是 RC 的升级版,最大的特点是我们可以随时知道当前 pod 的部署进度.即一个 pod 创建、调度、绑定节点、在目标 node 上启动对应容器的部署过程.",-1),o=e("h3",{id:"使用场景",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用场景","aria-hidden":"true"},"#"),l(" 使用场景")],-1),r=e("ol",null,[e("li",null,"创建 deployment 对象来生成对应 Replica Set 并完成 pod 副本创建"),e("li",null,"检查 deployment 的状态来看部署是否完成(pod 副本数量是否达到预期值)"),e("li",null,"更新 deployment 以创建新的 pod (如镜像升级)"),e("li",null,"如果当前 deployment 不稳定,则回滚到一个早先的 deloyment 版本"),e("li",null,"暂停 deployment 以便一次修改多个 podtemplatespec 配置,之后再恢复,进行新的发布")],-1),i=e("h3",{id:"deployment-yaml",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#deployment-yaml","aria-hidden":"true"},"#"),l(" deployment.yaml")],-1),k=e("div",{class:"language-yaml ext-yml line-numbers-mode"},[e("pre",{class:"language-yaml"},[e("code",null,[e("span",{class:"token key atrule"},"apiversion"),e("span",{class:"token punctuation"},":"),l(" extensions/vlbetal\n"),e("span",{class:"token key atrule"},"kind"),e("span",{class:"token punctuation"},":"),l(" Deployment\n"),e("span",{class:"token key atrule"},"metadata"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" frontend\n"),e("span",{class:"token key atrule"},"spec"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"replicas"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"1"),l("\n\t"),e("span",{class:"token key atrule"},"selector"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"matchlabels"),e("span",{class:"token punctuation"},":"),l("\n\t\t"),e("span",{class:"token key atrule"},"tier"),e("span",{class:"token punctuation"},":"),l(" frontend\n\tmatchexpressions\n\t\t"),e("span",{class:"token punctuation"},"-"),l("\t"),e("span",{class:"token punctuation"},"{"),e("span",{class:"token key atrule"},"key"),e("span",{class:"token punctuation"},":"),l(" tier"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token key atrule"},"operator"),e("span",{class:"token punctuation"},":"),l(" In"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token key atrule"},"values"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token punctuation"},"["),l("frontend"),e("span",{class:"token punctuation"},"]"),l(")\n\t"),e("span",{class:"token key atrule"},"template"),e("span",{class:"token punctuation"},":"),l("\n\t\tmetadata\n\t\t"),e("span",{class:"token key atrule"},"labels"),e("span",{class:"token punctuation"},":"),l("\n\t\t\t"),e("span",{class:"token key atrule"},"app"),e("span",{class:"token punctuation"},":"),l(" app"),e("span",{class:"token punctuation"},"-"),l("demo\n\t\t\t"),e("span",{class:"token key atrule"},"tier"),e("span",{class:"token punctuation"},":"),l(" frontend\n\t\tspec\n\t\t\tcontainers\n\t\t\t"),e("span",{class:"token punctuation"},"-"),l("\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" tomcat"),e("span",{class:"token punctuation"},"-"),l("demo\n\t\t\t\t"),e("span",{class:"token key atrule"},"mage"),e("span",{class:"token punctuation"},":"),l(" tomcat\n\t\t\t\t"),e("span",{class:"token key atrule"},"imagePullPolicy"),e("span",{class:"token punctuation"},":"),l(" IfNotPresent\n\t\t\t\t"),e("span",{class:"token key atrule"},"ports"),e("span",{class:"token punctuation"},":"),l("\n\t\t\t\t"),e("span",{class:"token punctuation"},"-"),l("\t"),e("span",{class:"token key atrule"},"containerport"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"8080"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br"),e("span",{class:"line-number"},"20"),e("br"),e("span",{class:"line-number"},"21"),e("br"),e("span",{class:"line-number"},"22"),e("br"),e("span",{class:"line-number"},"23"),e("br")])],-1),m=e("h3",{id:"创建-deployment",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#创建-deployment","aria-hidden":"true"},"#"),l(" 创建 deployment")],-1),b=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[l("kubectl create -f deployment.yaml "),e("span",{class:"token comment"},"# 创建"),l("\nkubectl get deployment "),e("span",{class:"token comment"},"# 查看"),l("\nkubectl describe deployments "),e("span",{class:"token comment"},"# 清楚的看到 deployment 控制 pod 的水平扩张过程"),l("\nkubectl get rs "),e("span",{class:"token comment"},"# 查看 Relica Set"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br")])],-1),d=e("p",null,"get 结果 :",-1),y=e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"列"),e("th",null,"含义")])]),e("tbody",null,[e("tr",null,[e("td",null,"DESIRED"),e("td",null,"pod 副本数量的期望值,即 Replica")]),e("tr",null,[e("td",null,"CURRENT"),e("td",null,"当前 Relica 值,当前 pod 副本数")]),e("tr",null,[e("td",null,"UP-TO-DATE"),e("td",null,"最新版本的 pod 副本数量,指示滚动升级过程中有多少个 pod 副本已经成功升级")]),e("tr",null,[e("td",null,"AVAILABLE"),e("td",null,"当前集群中可用 pod 副本数量,即集群中当前存活的 pod 副本数量")])])],-1),h=e("h2",{id:"statefulset",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#statefulset","aria-hidden":"true"},"#"),l(" statefulset")],-1),g=e("p",null,"可以看作 deployment/RC 的变种:",-1),v=e("ol",null,[e("li",null,[e("p",null,"每个 pod 都有稳定、唯一网络标识用来发现集群内其它成员,假设名称为 kafka,那么第一个叫 kafka-0,第二个叫 kafka-1")]),e("li",null,[e("p",null,"控制的 pod 副本启动顺序是受控制的")]),e("li",null,[e("p",null,"除了与 pv 卷捆绑以存储 pod 状态数据,还要使用 headless service,headless service 没有 cluster ip,解析 dns 域名返回全部 pod 的 endpoint 列表.为每个 pod 实例创建一个 DNS 域名."),e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),l("podname"),e("span",{class:"token variable"},")")]),e("span",{class:"token builtin class-name"},"."),e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),l("headless "),e("span",{class:"token function"},"service"),l(" name"),e("span",{class:"token variable"},")")]),l(),e("span",{class:"token comment"},"# kafka-0.kafka、kafka-1.kafka"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br")])])])],-1),f=e("h2",{id:"mysql-rc-yaml",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mysql-rc-yaml","aria-hidden":"true"},"#"),l(" mysql-rc.yaml")],-1),x=e("p",null,"Replica Set 与 Deployment 两个重要的资源对象正在逐步取代 RC.",-1),R=e("p",null,"Replication Controller (1.2 版本后叫做 Replica Set ) 定义一个期望场景,声明某个 pod 副本数量在任意时刻都符合某个预期的值.通过 RC 实现用户集群的高可用,包括以下几个部分",-1),P=e("ol",null,[e("li",null,"pod 期待副本数"),e("li",null,"用于筛选目标 pod 的 label selector"),e("li",null,"当副本数量小于预期数量时,用于创建新 pod 的 pod 模版 ( template )")],-1),S=e("div",{class:"language-yaml ext-yml line-numbers-mode"},[e("pre",{class:"language-yaml"},[e("code",null,[e("span",{class:"token key atrule"},"apiVersion"),e("span",{class:"token punctuation"},":"),l(" v1\n"),e("span",{class:"token key atrule"},"kind"),e("span",{class:"token punctuation"},":"),l(" RepicationController "),e("span",{class:"token comment"},"# 副本控制器"),l("\n"),e("span",{class:"token key atrule"},"metadata"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" mysql "),e("span",{class:"token comment"},"# rc 名称,全局唯一"),l("\n"),e("span",{class:"token key atrule"},"spec"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"replicas"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"1"),l(),e("span",{class:"token comment"},"# 期待 pod 副本数"),l("\n\t"),e("span",{class:"token key atrule"},"selector"),e("span",{class:"token punctuation"},":"),l("\n\t\t"),e("span",{class:"token key atrule"},"app"),e("span",{class:"token punctuation"},":"),l(" mysql "),e("span",{class:"token comment"},"# 监控和管理有这些标签的 pod 实例"),l("\n\t"),e("span",{class:"token key atrule"},"template"),e("span",{class:"token punctuation"},":"),l("\n\t\t"),e("span",{class:"token key atrule"},"metadata"),e("span",{class:"token punctuation"},":"),l("\n\t\t\t"),e("span",{class:"token key atrule"},"labels"),e("span",{class:"token punctuation"},":"),l("\n\t\t\t\t"),e("span",{class:"token key atrule"},"app"),e("span",{class:"token punctuation"},":"),l(" app"),e("span",{class:"token punctuation"},"-"),l("demo\n\t\t\t\t"),e("span",{class:"token key atrule"},"tier"),e("span",{class:"token punctuation"},":"),l(" frontend\n\t\t"),e("span",{class:"token key atrule"},"spec"),e("span",{class:"token punctuation"},":"),l("\n\t\t\tcontainers\n\t\t\t"),e("span",{class:"token punctuation"},"-"),l(),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" tomcat"),e("span",{class:"token punctuation"},"-"),l("demo\n\t\t\t\t"),e("span",{class:"token key atrule"},"lmage"),e("span",{class:"token punctuation"},":"),l(" tomcat\n\t\t\t\t"),e("span",{class:"token key atrule"},"imagePullPolicy"),e("span",{class:"token punctuation"},":"),l(" IfNotPresent\n\t\t\tenv\n\t\t\t"),e("span",{class:"token punctuation"},"-"),l("\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" GET_HOSTS_FROM\n\t\t\t\t"),e("span",{class:"token key atrule"},"value"),e("span",{class:"token punctuation"},":"),l(" dns\n\t\t\t"),e("span",{class:"token key atrule"},"ports"),e("span",{class:"token punctuation"},":"),l("\n\t\t\t"),e("span",{class:"token punctuation"},"-"),l("\t"),e("span",{class:"token key atrule"},"containerport"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"80"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br"),e("span",{class:"line-number"},"20"),e("br"),e("span",{class:"line-number"},"21"),e("br"),e("span",{class:"line-number"},"22"),e("br"),e("span",{class:"line-number"},"23"),e("br")])],-1),q=e("h3",{id:"动态修改副本数量",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#动态修改副本数量","aria-hidden":"true"},"#"),l(" 动态修改副本数量")],-1),C=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[l("kubectl scale rc redis-slave --replicas"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"3"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br")])],-1),A=e("p",null,"删除 RC 不会影响通过该 RC 已经创建好的 pod,为了删除所有 pod,可以设置 replicas 为 0,然后更新该 RC. kubectl 提供 stop 和 delete 命令来一次删除 RC 和 RC 控制的全部 pod",-1),E=e("h2",{id:"发布到集群",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#发布到集群","aria-hidden":"true"},"#"),l(" 发布到集群")],-1),D=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[l("kubectl create -f rc.yaml "),e("span",{class:"token comment"},"# 创建"),l("\nkubectl get rc "),e("span",{class:"token comment"},"# 查看创建的 rc"),l("\nkubectl get pods "),e("span",{class:"token comment"},"# 查看 pod 创建情况, pod 创建时间较长时状态从 pending -> running"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br")])],-1),N=e("h2",{id:"mysql-svc-yaml",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mysql-svc-yaml","aria-hidden":"true"},"#"),l(" mysql-svc.yaml")],-1),I=e("div",{class:"language-yaml ext-yml line-numbers-mode"},[e("pre",{class:"language-yaml"},[e("code",null,[e("span",{class:"token key atrule"},"apiverslon"),e("span",{class:"token punctuation"},":"),l(" v1\n"),e("span",{class:"token key atrule"},"kind"),e("span",{class:"token punctuation"},":"),l(" Service "),e("span",{class:"token comment"},"#表明是 Kubernetes Service"),l("\n"),e("span",{class:"token key atrule"},"metadata"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" mysql "),e("span",{class:"token comment"},"# Service 的全局唯一名称"),l("\n"),e("span",{class:"token key atrule"},"spec"),e("span",{class:"token punctuation"},":"),l("\n \t"),e("span",{class:"token key atrule"},"ports"),e("span",{class:"token punctuation"},":"),l("\n \t\t"),e("span",{class:"token punctuation"},"-"),l(),e("span",{class:"token key atrule"},"port"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"3306"),l(),e("span",{class:"token comment"},"# Service 提供服务的端口号"),l("\n \t"),e("span",{class:"token key atrule"},"selector"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token comment"},"# Service 对应的 Pod 拥有这里定义的标签"),l("\n \t\t"),e("span",{class:"token key atrule"},"app"),e("span",{class:"token punctuation"},":"),l(" mysql\n  "),e("span",{class:"token key atrule"},"env"),e("span",{class:"token punctuation"},":"),l("            "),e("span",{class:"token comment"},"# 注入环境变量"),l("\n  \t"),e("span",{class:"token key atrule"},"-name"),l(),e("span",{class:"token punctuation"},":"),l(" E\n  \t "),e("span",{class:"token key atrule"},"value"),l(),e("span",{class:"token punctuation"},":"),l(" a\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br")])],-1),H=e("h3",{id:"service-多端口",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#service-多端口","aria-hidden":"true"},"#"),l(" service 多端口")],-1),T=e("p",null,"有些服务一个端口提供业务服务,一个端口提供管理服务,要求每个 endpoint 都有一个名称来区分",-1),z=e("div",{class:"language-yaml ext-yml line-numbers-mode"},[e("pre",{class:"language-yaml"},[e("code",null,[e("span",{class:"token key atrule"},"Ports"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token punctuation"},"-"),l("\t"),e("span",{class:"token key atrule"},"port"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"8080"),l("\n\t\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" service"),e("span",{class:"token punctuation"},"-"),l("port\n\t"),e("span",{class:"token punctuation"},"-"),l("\t"),e("span",{class:"token key atrule"},"port"),e("span",{class:"token punctuation"},":"),l("\t"),e("span",{class:"token number"},"8005"),l("\n\t\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" shutdown"),e("span",{class:"token punctuation"},"-"),l("port\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br")])],-1),O=e("h3",{id:"dns-系统",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#dns-系统","aria-hidden":"true"},"#"),l(" DNS 系统")],-1),U=e("p",null,"实现服务发现.",-1),_=e("h3",{id:"ip",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ip","aria-hidden":"true"},"#"),l(" ip")],-1),K=e("ol",null,[e("li",null,"node ip : k8s 之外的节点访问访问集群内服务时必须通过 node ip 通信."),e("li",null,"pod ip : 是 docker engine 根据 docker0 网桥 ip 地址段进行分配的,是一个虚拟的二层网络,一个 pod 里的容器访问另一个 pod 里的容器时通过 pod ip 所在的二层网络进行通信.真实的 tcp/ip 流量通过 node ip 物理网卡流出"),e("li",null,[l("cluster ip 虚拟 ip,像一个伪造的 ip 网络 "),e("ul",null,[e("li",null,"仅作用于 service 这个对象,由 k8s 管理和分配"),e("li",null,"无法被 ping,因为没有一个实体网络对象来相应"),e("li",null,"只能和 service port 组成一个具体通信端口,属于内部地址,无法外部直接使用")])])],-1),L=e("p",null,"采用 nodeport 提供外部应用访问入口:",-1),M=e("div",{class:"language-yaml ext-yml line-numbers-mode"},[e("pre",{class:"language-yaml"},[e("code",null,[e("span",{class:"token key atrule"},"spec"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"type"),e("span",{class:"token punctuation"},":"),l(" NodePort\n\t"),e("span",{class:"token key atrule"},"ports"),e("span",{class:"token punctuation"},":"),l("\n\t\t"),e("span",{class:"token punctuation"},"-"),l("\t"),e("span",{class:"token key atrule"},"port"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"8080"),l("\n\t\t\t"),e("span",{class:"token key atrule"},"nodeport"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"31002"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br")])],-1),V=e("p",null,"nodeport 解决外部访问问题,但是没解决负载均衡,需要单独部署.HAProxy 或 Nginx.",-1),F=e("h2",{id:"创建-service",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#创建-service","aria-hidden":"true"},"#"),l(" 创建 service")],-1),$=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[l("kubectl create -f mysql-svc.yaml "),e("span",{class:"token comment"},"# 创建 service"),l("\nkubectl get svc "),e("span",{class:"token comment"},"# 查看创建的 service"),l("\nkubectl get svc mysql -o yaml "),e("span",{class:"token comment"},"# 查看服务 yaml 文件"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br")])],-1),j=e("p",null,"cluster ip 是服务创建后系统自动分配的,pod 无法预先知道某个 service 的 cluster ip,因此需要服务发现机制来找到这个服务.k8s使用环境变量来解决这个问题,容器可以从环境变量中获取 service 对应的 cluster IP 和端口,从而发起 tcp/ip 连接请求.",-1),w=e("p",null,[e("img",{src:"/k/assets/k8s-service.f5bacd27.png",alt:"k8s-service"})],-1),B=e("h2",{id:"app-yaml",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#app-yaml","aria-hidden":"true"},"#"),l(" app.yaml")],-1),G=e("p",null,"应用容器内使用环境变量 MYSQL_SERVICE_HOST 的值连接 mysql 服务,更安全可靠的方法是应用服务的名称.",-1),Q=e("div",{class:"language-yaml ext-yml line-numbers-mode"},[e("pre",{class:"language-yaml"},[e("code",null,[e("span",{class:"token key atrule"},"type"),l(),e("span",{class:"token punctuation"},":"),l(" NodePort\nnodePort "),e("span",{class:"token punctuation"},":"),e("span",{class:"token number"},"30001"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),Y=e("p",null,"此 service 开启 nodeport 外网访问模式,集群之外可以通过 nodePort 访问服务.",-1),J=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,"kubectl get services\n")]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br")])],-1),W=e("h2",{id:"滚动升级",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#滚动升级","aria-hidden":"true"},"#"),l(" 滚动升级")],-1),X=e("h2",{id:"hpa-横向自动扩容",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hpa-横向自动扩容","aria-hidden":"true"},"#"),l(" HPA-横向自动扩容")],-1),Z=e("h3",{id:"负载度量指标",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#负载度量指标","aria-hidden":"true"},"#"),l(" 负载度量指标")],-1),nn=e("ol",null,[e("li",null,"CPUUtilizationPercentage : 目标 pod 所有副本自身 cpu 利用率的平均值,一个 pod 自身的 cpu 使用率是该 pod 当前 cpu 使用量除以他的 pod request 的值.如果目标没有定义 pod Request 无法使用该值实现横向自动扩容.该值超过 80% 会自动扩容,高峰过去后 cpu 利用率降下来 pod 副本数将少到合理水平.计算过程通常是 1min 钟的平均值,痛殴查询 heapster 监控子系统得到这个值需要安装部署 heapster.从 1.7 版本后 k8s 自身孵化了一个基础性能数据采集监控框架 Kubernetes Monitoring Architecture."),e("li",null,"应用程序自定义度量指标(如 qps、tps)")],-1),sn=e("div",{class:"language-yaml ext-yml line-numbers-mode"},[e("pre",{class:"language-yaml"},[e("code",null,[e("span",{class:"token comment"},"# 控制一个目标对象名为 php-apache 的 deloyment 里 pod 副本数,当 Cpuutilizationpercentage 超过 90% 会触发自动扩容,在扩容和缩容时必须满足一个约束条件是 pod 副本数为 1-10"),l("\n"),e("span",{class:"token key atrule"},"apiversion"),e("span",{class:"token punctuation"},":"),l(" autoscaling/v1\n"),e("span",{class:"token key atrule"},"kind"),e("span",{class:"token punctuation"},":"),l(" HorizontalPodAutoscaler\n"),e("span",{class:"token key atrule"},"metadata"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" php"),e("span",{class:"token punctuation"},"-"),l("apache\n\t"),e("span",{class:"token key atrule"},"namespace"),e("span",{class:"token punctuation"},":"),l(" default\n"),e("span",{class:"token key atrule"},"spec"),e("span",{class:"token punctuation"},":"),l("\n\t"),e("span",{class:"token key atrule"},"maxreplicas"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"10"),l("\n\t"),e("span",{class:"token key atrule"},"minreplicas"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"1"),l("\n\t"),e("span",{class:"token key atrule"},"scaletargetRef"),e("span",{class:"token punctuation"},":"),l("\n\t\t"),e("span",{class:"token key atrule"},"kind"),e("span",{class:"token punctuation"},":"),l(" Deployment\n\t\t"),e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),l(" php"),e("span",{class:"token punctuation"},"-"),l("apache\n\t"),e("span",{class:"token key atrule"},"target Cpuutilizationpercentage"),e("span",{class:"token punctuation"},":"),l(),e("span",{class:"token number"},"90"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br")])],-1),an=e("p",null,"除了通过直接定义 yaml 文件并调用 kubectl create 命令来创建 HPA 资源对象方式,还可以通过简单的命令行直接创建.",-1),en=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[l("Kubectl autoscale deployment php-apache --cpu-percent"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"90"),l(" --min"),e("span",{class:"token operator"},"="),l("l --max"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"10"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br")])],-1),ln=e("h2",{id:"小记",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#小记","aria-hidden":"true"},"#"),l(" 小记")],-1),tn=e("p",null,"rc.yaml 创建 pod, service.yaml 创建服务.",-1);t.render=function(e,l){return n(),s(a,null,[c,p,u,o,r,i,k,m,b,d,y,h,g,v,f,x,R,P,S,q,C,A,E,D,N,I,H,T,z,O,U,_,K,L,M,V,F,$,j,w,B,G,Q,Y,J,W,X,Z,nn,sn,an,en,ln,tn],64)};export default t;
