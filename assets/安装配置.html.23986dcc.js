import{d as e}from"./app.e373aad4.js";const n={},s=e('<h1 id="安装配置" tabindex="-1"><a class="header-anchor" href="#安装配置" aria-hidden="true">#</a> 安装配置</h1><h2 id="建议" tabindex="-1"><a class="header-anchor" href="#建议" aria-hidden="true">#</a> 建议</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>systemctl disable firewalld\nsystemctl stop  firewalld <span class="token comment"># 禁用防火墙</span>\nsetenforce <span class="token number">0</span> <span class="token comment"># 关闭 selinux /etc/sysconfig/selinux selinux=disable</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="使用-kubeadm-安装" tabindex="-1"><a class="header-anchor" href="#使用-kubeadm-安装" aria-hidden="true">#</a> 使用 kubeadm 安装</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">[</span>kubernetes<span class="token punctuation">]</span>\nname =\nbaseurl =\nenabled = 1\ngpgcheck = 0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum <span class="token function">install</span> -y kubelet kubeadm kubectl --disableexcludes<span class="token operator">=</span>kubernetes\nsystemctl <span class="token builtin class-name">enable</span> docker <span class="token operator">&amp;</span> systemctl start docker\nsystemctl <span class="token builtin class-name">enable</span> kubelet <span class="token operator">&amp;</span> systemctl start kubelet\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubeadm config upload from-file <span class="token comment"># 配置文件上传到集群中生成 configmap</span>\nkubeadm config upload from-flags <span class="token comment"># 由配置参数生成 configmap</span>\nkubeadm config view <span class="token comment"># 查看当前集群中配置值</span>\nkubeadm config print init-defaults <span class="token comment"># 输出 kubeadm init 默认参数的文件内容</span>\nkubeadm config print join-defaults <span class="token comment">#</span>\nkubeadm config migrate <span class="token comment"># 在新旧版本之间进行配置转换</span>\nkubeadm config images list <span class="token comment"># 列出所需的镜像列表</span>\nkubeadm config config images pull <span class="token comment"># 拉取镜像到本地</span>\n\nkubeadm config print init-defaults <span class="token operator">&gt;</span> init.default.yaml <span class="token comment"># 对生成对文件修改即可 init-config.yaml</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="下载相关镜像" tabindex="-1"><a class="header-anchor" href="#下载相关镜像" aria-hidden="true">#</a> 下载相关镜像</h3><h4 id="docker-加速" tabindex="-1"><a class="header-anchor" href="#docker-加速" aria-hidden="true">#</a> docker 加速</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;{&quot;registry-mirrors&quot;:[&quot;https://registry.docker-cn.com&quot;]}&#39;</span> <span class="token operator">&gt;</span> /etc/docker/daemon.json <span class="token comment"># 重启docker</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="下载" tabindex="-1"><a class="header-anchor" href="#下载" aria-hidden="true">#</a> 下载</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubeadm config images pull --config<span class="token operator">=</span>init-config.yaml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="安装-master" tabindex="-1"><a class="header-anchor" href="#安装-master" aria-hidden="true">#</a> 安装 master</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubeadm init <span class="token comment"># 一键安装 k8s 的 master,此时不具备网络功能,需要单独安装插件</span>\nkubeadm init --config<span class="token operator">=</span>init-config.yaml <span class="token comment"># 集群控制面初始化,等待 master 安装成功</span>\n<span class="token comment"># 根据提示复制配置文件到用户的 home 目录</span>\n<span class="token comment"># master 上安装了 k8s,但是集群内还没有可用的工作 node,并缺乏对容器网络的配置</span>\n\nkubectl get -n kube-system configmap <span class="token comment"># 验证 configmap</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="安装-node-加入集群" tabindex="-1"><a class="header-anchor" href="#安装-node-加入集群" aria-hidden="true">#</a> 安装 node,加入集群</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 同 master 初始化</span>\n<span class="token comment"># 修改配置 apiserverEndpoint master 地址 token 和 tlsbootstraptoken 来自上面 master 最后一行提示</span>\nkubeadm <span class="token function">join</span> --config<span class="token operator">=</span>join-config.yaml  <span class="token comment"># join 命令加入集群</span>\nkubectl taint nodes --alll node-role.kubernets.io/master <span class="token comment"># 上传 node 的 label 让 master 称为一个 node,安装一个单机 all-in-one 的 k8s 环境</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="安装网络插件" tabindex="-1"><a class="header-anchor" href="#安装网络插件" aria-hidden="true">#</a> 安装网络插件</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kugectl get nodes <span class="token comment"># 查看 master 状态为 notready,因为还没安装网络插件</span>\nkubectl apply  f https // cloud.Weave.works/k s/net? k <span class="token number">8</span> s - version <span class="token operator">=</span> s  <span class="token punctuation">(</span>kubectl  version I base64 Itr-d <span class="token punctuation">\\</span>n<span class="token operator">!</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl get pods --alll-namespaces <span class="token comment"># 查看所有 pod 正常</span>\nkubectl --namespace<span class="token operator">=</span>kube-system describe pod podname <span class="token comment"># 如果有状态错误的 pod,可以查看错误原因</span>\nkubeadm reset <span class="token comment"># 将主机恢复原状,重新安装</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="以二进制文件方式安装" tabindex="-1"><a class="header-anchor" href="#以二进制文件方式安装" aria-hidden="true">#</a> 以二进制文件方式安装</h2><p>k8s 主要服务程序都可以通过直接运行二进制文件加上启动参数完成运行.在 master 上需要部署 etcd、kube-apiserver、kube-controller-manager、kube-scheduler 服务进程,在工作 node 上需要部署 docker、kubelet 和 kube-proxy 服务进程.</p><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>kube-apiserver</td><td>主程序</td></tr><tr><td>kube-apiserver.docker_tag</td><td>docker 镜像 tag</td></tr><tr><td>kube-apiserver.tar</td><td>apiserver docker 镜像文件</td></tr><tr><td>kube-controller-manager</td><td>主程序</td></tr><tr><td>kube-controller-manager.docker_tag</td><td>镜像tag</td></tr><tr><td>kube-controller-manager.tar</td><td>镜像文件</td></tr><tr><td>kube-scheduler</td><td></td></tr><tr><td>kube-scheduler.docker_tag</td><td></td></tr><tr><td>kube-scheduler.tar</td><td></td></tr><tr><td>kubelet</td><td></td></tr><tr><td>kube-proxy</td><td></td></tr><tr><td>kube-proxy.tar</td><td></td></tr><tr><td>kubectl</td><td></td></tr><tr><td>kubeadm</td><td></td></tr><tr><td>hyperkube</td><td>包含了所有服务的程序,可以启动任一服务</td></tr><tr><td>clout-controller-manager</td><td>与云厂商对接的 controller</td></tr><tr><td>apiextensions-apiserver</td><td>实现自定义资源对象扩展的apiserver</td></tr></tbody></table><p>将二进制文件复制到 /usr/bin 目录下,在 /usr/lib/system/system 目录下创建服务配置.</p><h3 id="etcd-服务" tabindex="-1"><a class="header-anchor" href="#etcd-服务" aria-hidden="true">#</a> etcd 服务</h3><p>将 etcd 和 etcdctl 复制到 bin 目录.并配置 systemd.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>\nDescription=Etcd Server\nAfter=network target\n\n<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>\nype=simple\nWorkingdirectory=/var/lib/etcd/ <span class="token comment"># etcd 数据保存目录,需要在启动 etcd 前创建</span>\nEnvironmentfile=<span class="token punctuation">-</span>/etc/etcd/etcd.Conf\nExecstart=/usr/in/etcd\n\n<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>\nWantedby=Multi<span class="token punctuation">-</span>user target\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>systemctl daemon-reload\nsystemctl <span class="token builtin class-name">enable</span> etcd.service\nsystemctl start etcd.service\netcdctl endpoint health <span class="token comment"># 验证 etcd 是否正确启动</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="kube-apiserver-服务" tabindex="-1"><a class="header-anchor" href="#kube-apiserver-服务" aria-hidden="true">#</a> kube-apiserver 服务</h3><p>将 kube-apiserver、kube-controller-manager、kube-scheduler 复制到 /usr/bn 目录.</p><p>设置 /usr/lib/systemd/system/kube-apiserver.service.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">[</span>Uniti<span class="token punctuation">]</span>\nDescription=Kubernetes API Server\n <span class="token key atrule">Documentation=https</span><span class="token punctuation">:</span> / / github. Com / gooqlecloudplatform / kubernetes\n After=etcd.service\n Wants=etcd.Service\n\n <span class="token punctuation">[</span>Service<span class="token punctuation">]</span>\nEnvironmentfile=/etc/kubernetes/apiserver\nExecstart=/usr/bin/Kube<span class="token punctuation">-</span>apiserver SKUBE_API_ARGS <span class="token comment"># cat /etc/kubernetes/apiserver</span>\nRestart=On<span class="token punctuation">-</span>failure\nIype=notify\nLIMITNOFILE=65536\n\n <span class="token punctuation">[</span>Install<span class="token punctuation">]</span>\n Wantedby=Multi<span class="token punctuation">-</span>user.target\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="启动参数" tabindex="-1"><a class="header-anchor" href="#启动参数" aria-hidden="true">#</a> 启动参数</h3><ol><li>--etc-servers : 指定 etcd 服务的 url</li><li>--storage-backend : 指定 etcd 版本</li><li>--insecure-bind-address : api server 绑定主机的非安全 ip 地址,设置 0.0.0.0 表示绑定所有 ip 地址</li><li>--insecure-port : api server 绑定主机非安全端口,默认 8989</li><li>--service-cluster-ip-range : 集群中 service 的虚拟 ip 地址范围,不能与无力机 ip 地址有重合,如 169.169.0.0/16</li><li>--service-node-port-range : 集群中 service 可使用的物理机端口号范围,默认 3000~32767</li><li>--enable-admission-plugins : 集群的准入控制设置</li><li>--logtostderr : 设置为 false 表示将日志写入文件不写入 stderr</li><li>--log-dir : 日志目录</li><li>--v : 日志级别</li></ol><h3 id="kube-controller-manager-服务" tabindex="-1"><a class="header-anchor" href="#kube-controller-manager-服务" aria-hidden="true">#</a> kube-controller-manager 服务</h3><p>kube-controller-manager 服务依赖 kube-apiserver 服务.</p><p>设置 /usr/lib/systemd/system/kube-controller-manager.service</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="kube-scheduler-服务" tabindex="-1"><a class="header-anchor" href="#kube-scheduler-服务" aria-hidden="true">#</a> kube-scheduler 服务</h3><p>kube-scheduler 依赖 kube-apiserver.</p><h3 id="node-上-kubelet、kube-proxy-服务" tabindex="-1"><a class="header-anchor" href="#node-上-kubelet、kube-proxy-服务" aria-hidden="true">#</a> node 上 kubelet、kube-proxy 服务</h3><p>需要先安装 docker</p>',44);n.render=function(e,n){return s};export default n;
