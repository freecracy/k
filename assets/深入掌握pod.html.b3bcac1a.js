import{d as n}from"./app.e373aad4.js";const a={},s=n('<h1 id="深入掌握-pod" tabindex="-1"><a class="header-anchor" href="#深入掌握-pod" aria-hidden="true">#</a> 深入掌握 pod</h1><h2 id="pod-和容器的使用" tabindex="-1"><a class="header-anchor" href="#pod-和容器的使用" aria-hidden="true">#</a> pod 和容器的使用</h2><h3 id="pod-定义" tabindex="-1"><a class="header-anchor" href="#pod-定义" aria-hidden="true">#</a> pod 定义</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">aiversion</span><span class="token punctuation">:</span> v1\n<span class="token key atrule">kind</span> <span class="token punctuation">:</span> Pod\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> string\n  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> string\n  <span class="token key atrule">labels</span><span class="token punctuation">:</span>\n    <span class="token key atrule">-name</span><span class="token punctuation">:</span> string\n  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>\n    <span class="token key atrule">-name</span><span class="token punctuation">:</span> string\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">containers</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string\n      <span class="token key atrule">images</span><span class="token punctuation">:</span> string\n      <span class="token key atrule">imagesPullPolicy</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Always <span class="token punctuation">|</span> Nerver <span class="token punctuation">|</span> IfNotPresent<span class="token punctuation">]</span>\n      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span>\n      <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span>\n      <span class="token key atrule">workingDir</span><span class="token punctuation">:</span> string\n      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>\n        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string\n          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> string\n          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> boolean\n          <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string\n              <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> int\n              <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> int\n              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> string\n          <span class="token key atrule">env</span><span class="token punctuation">:</span>\n            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string\n              <span class="token key atrule">value</span><span class="token punctuation">:</span> string\n          <span class="token key atrule">resources</span><span class="token punctuation">:</span>\n            <span class="token key atrule">limits</span><span class="token punctuation">:</span>\n              <span class="token key atrule">cpu</span><span class="token punctuation">:</span> string\n              <span class="token key atrule">memory</span><span class="token punctuation">:</span> string\n            <span class="token key atrule">request</span><span class="token punctuation">:</span>\n              <span class="token key atrule">cpu</span><span class="token punctuation">:</span> string\n              <span class="token key atrule">memory</span><span class="token punctuation">:</span> string\n            <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>\n              <span class="token key atrule">exec</span><span class="token punctuation">:</span>\n                <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>属于同一个 pod 的多个容器应用之间相互访问仅需要通过 localhost 就可以通信,使得这一组容器被绑定在一个环境中.</p><h3 id="静态-pod" tabindex="-1"><a class="header-anchor" href="#静态-pod" aria-hidden="true">#</a> 静态 pod</h3><p>静态 pod 由 kubelet 进行管理的仅存在特定 node 上的 pod,他们不能通过 api server 管理,无法与 ReplicationController、deployment、或者 DaemonSet 进行关联,并且 kubelet 无法对他们健康检查.总是由 kubelet 创建,总在 kubelet 所在 node 上运行.</p><h4 id="配置文件方式创建" tabindex="-1"><a class="header-anchor" href="#配置文件方式创建" aria-hidden="true">#</a> 配置文件方式创建</h4><p>设置 kubelet 启动参数 --config,指定 kubelet 需要监控的配置文件所在目录, kubelet 会定期扫描该目录,并根据目录下 yaml 和 json 文件创建.</p><p>由于静态 pod 无法通过 api server 直接管理,所以在 master 上尝试删除这个 pod 时,会变成 pending 状态,且不会被删除.删除该 pod 只能在其所在的 node 上将配置文件从目录中删除.</p><h4 id="http-方式创建" tabindex="-1"><a class="header-anchor" href="#http-方式创建" aria-hidden="true">#</a> HTTP 方式创建</h4><p>通过设置 kubelet 启动参数 --manifest-url,kubelet 会定期从该 url 地址下载 pod 定义的文件,并以 yaml 或 json 格式进行解析,然后创建 pod,实现方式与配置文件是一致的.</p><h3 id="日志容器" tabindex="-1"><a class="header-anchor" href="#日志容器" aria-hidden="true">#</a> 日志容器</h3><p>日志容器启动命令 tail -f /log/access.log</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl logs label -c busybox\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="应用配置管理" tabindex="-1"><a class="header-anchor" href="#应用配置管理" aria-hidden="true">#</a> 应用配置管理</h2><h3 id="configmap" tabindex="-1"><a class="header-anchor" href="#configmap" aria-hidden="true">#</a> configmap</h3><ol><li>生成容器内环境变量</li><li>设置容器启动命令的启动参数(需设置为环境变量)</li><li>以 volume 的形式挂载为容器内部文件或目录</li></ol><p>congfigmap 以一个或多个 key:value 的形式保存在 k8s 系统中供应用使用,即可以是变量值也可以是内容(server.xml=?xml)</p><h4 id="通过-yaml-配置文件方式创建" tabindex="-1"><a class="header-anchor" href="#通过-yaml-配置文件方式创建" aria-hidden="true">#</a> 通过 yaml 配置文件方式创建</h4><p>执行 kubectl create 命令创建</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl create -f xxx.yaml\nkubectl get configmap <span class="token comment"># 查看创建的 configmap</span>\nkubectl describe configmap xxxname\nkubectl get configmap xxxname -o yaml <span class="token comment"># 查看配置文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="命令行方式创建" tabindex="-1"><a class="header-anchor" href="#命令行方式创建" aria-hidden="true">#</a> 命令行方式创建</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl create configmap name --from-file<span class="token operator">=</span>key<span class="token operator">=</span>file\nkubectl create configmap name --from-file<span class="token operator">=</span>dir <span class="token comment"># 文件名被设置为 key 内容设置为 value</span>\nkubectl create configmap name --from-literal<span class="token operator">=</span>key1<span class="token operator">=</span>value1 --from-literal<span class="token operator">=</span>key2<span class="token operator">=</span>value2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="在容器内使用配置" tabindex="-1"><a class="header-anchor" href="#在容器内使用配置" aria-hidden="true">#</a> 在容器内使用配置</h3><p>容器内以环境变量形式使用</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl get pods --show-all <span class="token comment"># 可以查看已经停止的容器</span>\nkubectl logs podname <span class="token comment"># 可以看到容器内环境变量设置</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="envfrom" tabindex="-1"><a class="header-anchor" href="#envfrom" aria-hidden="true">#</a> envfrom</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">envFrom</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">configMapRef</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> xxx <span class="token comment"># 将 configmap 中的 key=value 自动生成环境变量</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="通过-volumemount-使用configmap" tabindex="-1"><a class="header-anchor" href="#通过-volumemount-使用configmap" aria-hidden="true">#</a> 通过 volumeMount 使用configmap</h3><h2 id="pod-控制和调度管理" tabindex="-1"><a class="header-anchor" href="#pod-控制和调度管理" aria-hidden="true">#</a> pod 控制和调度管理</h2><h2 id="pod-升级和管理" tabindex="-1"><a class="header-anchor" href="#pod-升级和管理" aria-hidden="true">#</a> pod 升级和管理</h2><h2 id="pod-扩缩容机制" tabindex="-1"><a class="header-anchor" href="#pod-扩缩容机制" aria-hidden="true">#</a> pod 扩缩容机制</h2>',33);a.render=function(n,a){return s};export default a;
